image: public.ecr.aws/bitnami/node:18

before_script:
  - rm -rf /var/lib/apt/lists/*
  - apt-get update
  - apt-cache gencaches
  - apt-get install -y zip
  - apt-get install -y jq

stages:
  - build-test

accelerator-workshop-session:
  stage: build-test
  tags:
    - arch:amd64
    - size:xlarge
  when: manual
  script:
    - "export NODE_OPTIONS=--max_old_space_size=16384"
    - "cd source"
    - "npm install --global yarn"
    - "yarn install"
    - "yarn build"
    - "export version=$(cat package.json | jq -r '.version')"
    - "cd packages/@aws-accelerator/installer"
    - "yarn run cdk synth -c enable-single-account-mode=true --output $CI_PROJECT_DIR"
    - "cd ../../../../deployment"
    - "chmod +x ./build-open-source-dist.sh && ./build-open-source-dist.sh lza-on-aws-workshop"
    - "cp ./open-source/lza-on-aws-workshop.zip $CI_PROJECT_DIR/lza-on-aws-workshop.zip"
  artifacts:
    name: "lza-on-aws-workshop"
    when: on_success
    paths:
      - lza-on-aws-workshop.zip
      - AWSAccelerator-InstallerStack-Workshop.template.json
accelerator-build:
  stage: build-test
  tags:
    - arch:amd64
    - size:xlarge
  script:
    - "export NODE_OPTIONS=--max_old_space_size=16384"
    - "cd source"
    - "npm install --global yarn"
    - "yarn install"
    - "yarn lint"
    - "yarn build"
    - "cd packages/@aws-accelerator/installer"
    - "yarn cdk synth"
    - "cp cdk.out/AWSAccelerator-InstallerStack.template.json $CI_PROJECT_DIR/AWSAccelerator-InstallerStack.template.json"
  artifacts:
    name: "installer-template"
    when: on_success
    paths:
      - AWSAccelerator-InstallerStack.template.json
accelerator-test:
  stage: build-test
  tags:
    - arch:amd64
    - size:xlarge
  script:
    - "export NODE_OPTIONS=--max_old_space_size=16384"
    - "wget -v 'https://s3.amazonaws.com/viperlight-scanner/latest/viperlight.zip'"
    - "unzip -qo viperlight.zip -d ../viperlight"
    - "rm -r ./viperlight.zip"
    - "../viperlight/bin/viperlight scan"
    - "cd source"
    - "npm install --global yarn"
    - "yarn install"
    - "yarn lerna run precommit --stream"
    - "yarn build"
    - "export ACCELERATOR_PREFIX=AWSAccelerator"
    - "yarn validate-config packages/@aws-accelerator/accelerator/test/configs/all-enabled/" # Validate all enabled config files
    - "yarn test"
  artifacts:
    when: always
    reports:
      junit:
        - source/test-reports/*.xml
    expire_in: 1 day
# sonar-test:
#   stage: build-test
#   tags:
#     - arch:amd64
#     - size:xlarge
#   variables:
#     AWS_DEFAULT_REGION: us-east-1
#     SCANNER_BINARY: /tmp/sonar-scanner-${SCANNER_VERSION}-linux/bin/sonar-scanner
#     SCANNER_VERSION: 4.7.0.2747
#     SCANNER_ZIP_FILE: sonar-scanner-cli-${SCANNER_VERSION}-linux.zip
#     SECRET_ID: sonarqube-token
#     SONAR_HOST_URL: https://sonarqube.tools.solutions.aws.dev
#     SONAR_STATUS_URL: ${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${SONAR_PRJ_KEY}
#     SONAR_PRJ_KEY: com.amazon.aws:landing-zone-accelerator-on-aws
#     SONAR_PRJ_SETTINGS: /tmp/customized-sonar-project.properties
#   before_script:
#     # Install dependencies
#     - "apt-get update && apt-get install jq -y"
#     - "wget --progress=dot:mega -O /tmp/awscliv2.zip https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
#     - "unzip -q /tmp/awscliv2.zip -d /tmp"
#     - "/tmp/aws/install"
#     # Download scanner
#     - "wget --progress=dot:mega -O /tmp/${SCANNER_ZIP_FILE} https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/${SCANNER_ZIP_FILE}"
#     - "unzip -q /tmp/${SCANNER_ZIP_FILE} -d /tmp"
#     # Set additional project settings
#     - auth_token=$(aws secretsmanager get-secret-value --secret-id ${SECRET_ID} --query SecretString | tr -d '"')
#     - "project_settings=./sonar-project.properties"
#     - "curl_settings=/tmp/curl.config"
#     - project_version=$(cat source/package.json | jq -r '.version' | tr -d '"')
#     - "if [ -e ./sonar-project.properties ]; then cp ${project_settings} ${SONAR_PRJ_SETTINGS}; else touch ${SONAR_PRJ_SETTINGS}; fi"
#     - 'printf "\n\nsonar.login=${auth_token}\n" >> ${SONAR_PRJ_SETTINGS}'
#     - 'echo "user=${auth_token}:" > ${curl_settings}'
#   script:
#     # Run tests
#     - "export NODE_OPTIONS=--max_old_space_size=16384"
#     - "cd source"
#     - "npm install --global yarn"
#     - "yarn install"
#     - "yarn lint"
#     - "yarn build"
#     - "export ACCELERATOR_PREFIX=AWSAccelerator"
#     - "yarn test"
#     - "cd ../"
#     # Run scanner and save results locally
#     - "${SCANNER_BINARY} -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.projectKey=${SONAR_PRJ_KEY} -Dsonar.projectVersion=${project_version} -Dproject.settings=${SONAR_PRJ_SETTINGS}"
#     - "sleep 10"
#     - "curl -sK ${curl_settings} ${SONAR_STATUS_URL} > /tmp/scan_result.json"
#     - "scan_data=$(cat /tmp/scan_result.json | jq)"
#     - 'printf "\nScan result:\n\n${scan_data}\n"'
#     # Retrieve code coverage and fail pipeline if in ERROR status
#     - coverage=$(echo ${scan_data} | jq '.projectStatus.conditions | map(select(.metricKey == "coverage"))')
#     - coverage_status=$(echo ${coverage} | jq  -r '.[0].status')
#     - 'if [ ${coverage_status} = "OK" ]; then printf "SUCCESS: Code coverage meets minimum threshold.\n\nCoverage statistics:\n${coverage}"; fi'
#     - 'if [ ${coverage_status} = "ERROR" ]; then printf "ERROR: Code coverage percentage does not meet minimum threshold.\n\nCoverage statistics:\n${coverage}"; exit 1; fi'
#     # Retieve code complexity and fail pipeline if in ERROR status (leaving commented out until further work is completed on codebase)
#     # - complexity=$(echo ${scan_data} | jq '.projectStatus.conditions | map(select(.metricKey == "cognitive_complexity"))')
#     # - complexity_status=$(echo ${complexity} | jq  -r '.[0].status')
#     # - 'if [ ${complexity_status} = "OK" ]; then printf "SUCCESS: Cognitive complexity meets minimum threshold.\n\nCognitive complexity statistics:\n${complexity}"; fi'
#     # - 'if [ ${complexity_status} = "ERROR" ]; then printf "ERROR: Cognitive complexity score does not meet minimum threshold.\n\nCognitive complexity statistics:\n${complexity}"; fi'
#     # - 'if [ ${coverage_status} = "ERROR || ${complexity_status} = "ERROR" ]; then exit 1; fi'
#   rules:
#     - if: $CI_PROJECT_ID == "11925" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
pages:
  stage: build-test
  tags:
    - arch:amd64
    - size:xlarge
  script:
    - "export NODE_OPTIONS=--max_old_space_size=16384"
    - "cd source"
    - "yarn install"
    - "yarn build"
    - "yarn docs"
    - "cp -R docs/ ../public/"
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
